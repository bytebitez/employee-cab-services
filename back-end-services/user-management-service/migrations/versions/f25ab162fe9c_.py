"""empty message

Revision ID: f25ab162fe9c
Revises: 
Create Date: 2024-07-04 00:41:35.836234

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'f25ab162fe9c'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('first_name', sa.String(length=50), nullable=False),
    sa.Column('last_name', sa.String(length=50), nullable=False),
    sa.Column('phone_number', sa.String(length=15), nullable=False),
    sa.Column('email', sa.String(length=100), nullable=False),
    sa.Column('password_hash', sa.Text(), nullable=False),
    sa.Column('role', sa.String(length=20), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('phone_number')
    )
    op.drop_table('bookings')
    op.drop_table('employees')
    op.drop_table('availabilities')
    op.drop_table('routes')
    op.drop_table('drivers')
    op.drop_table('users')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('first_name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('last_name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('phone_number', sa.VARCHAR(length=15), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('password_hash', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('role', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("role::text = ANY (ARRAY['employee'::character varying, 'driver'::character varying, 'admin'::character varying]::text[])", name='users_role_check'),
    sa.CheckConstraint("status::text = ANY (ARRAY['active'::character varying, 'inactive'::character varying]::text[])", name='users_status_check'),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('email', name='users_email_key'),
    sa.UniqueConstraint('phone_number', name='users_phone_number_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('drivers',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('drivers_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('start_location', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('state', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('cab_number', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('manufacture', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('model', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('seats_available', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("status::text = ANY (ARRAY['available'::character varying, 'unavailable'::character varying]::text[])", name='drivers_status_check'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='drivers_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='drivers_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('routes',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('start_location', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('end_location', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('stops', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='routes_pkey')
    )
    op.create_table('availabilities',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('driver_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('start_location', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("status::text = ANY (ARRAY['available'::character varying, 'unavailable'::character varying]::text[])", name='availabilities_status_check'),
    sa.ForeignKeyConstraint(['driver_id'], ['drivers.id'], name='availabilities_driver_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='availabilities_pkey')
    )
    op.create_table('employees',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('employees_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('employee_id', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('pickup_location', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('state', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("status::text = ANY (ARRAY['waiting'::character varying, 'booked'::character varying, 'cancelled'::character varying]::text[])", name='employees_status_check'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='employees_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='employees_pkey'),
    sa.UniqueConstraint('employee_id', name='employees_employee_id_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('bookings',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('employee_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('pickup_location', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("status::text = ANY (ARRAY['pending'::character varying, 'confirmed'::character varying, 'cancelled'::character varying]::text[])", name='bookings_status_check'),
    sa.ForeignKeyConstraint(['employee_id'], ['employees.id'], name='bookings_employee_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='bookings_pkey')
    )
    op.drop_table('user')
    # ### end Alembic commands ###
